class WikiToHtmlConverter {

  private static final Map<String, String> conversionMap = [
    /(h1\.(.*))/            : '<br><h1>$2</h1>',
    /(h2\.(.*))/            : '<br><h2>$2</h2>',
    /(h3\.(.*))/            : '<br><h3>$2</h3>',
    /(\*(.*?)\*)/           : '<strong>$2</strong>',
    /(_(.*?)_)/             : '<em>$2</em>',
    /(\{noformat\}(.*?)\{noformat\})/ : '<code>$2</code>',
    /(\{\{(.*?)\}\})/        : '<code>$2</code>'
  ]

  private String convertLists(String text) {
    // OL shows as UL but when you edit the text field in SF it shows right..
    // Convert ordered lists
    text = text.replaceAll(/(?m)^# (.*)/, '<li>$1</li>').replaceAll(/(?s)(<li>.*?<\/li>)/, '<ol>$1</ol>')
    // Convert unordered lists
    text = text.replaceAll(/(?m)^\* (.*)/, '<li>$1</li>').replaceAll(/(?s)(<li>.*?<\/li>)/, '<ul>$1</ul>')
    return text
  }

  String convert(String wikiText) {
    conversionMap.each { pattern, replacement ->
        wikiText = wikiText.replaceAll(pattern, replacement)
    }

    // Separate handling for links to ensure they match the correct format
    wikiText = wikiText.replaceAll(/\[([^\[\]|]+)\|([^\[\]]+)\]/) { match, text, url ->
        if (url.startsWith("http")) {
            "<a href=\"$url\">$text</a>"
        } else {
            match.group(0) // return the original text if it's not a proper URL
        }
    }

    // Handle lists separately as they require more complex processing
    wikiText = convertLists(wikiText)

    // Convert paragraphs for lines not part of any list or block
    wikiText = wikiText.replaceAll(/(?m)^(?!<(h\d|ul|ol|li|a|strong|em|code|br|\/)).+$/, '<p>$0</p>')

    return wikiText
  }
}

if(firstSync){
  entity.entityType = "Case"
}



if(entity.entityType == "Case"){
  entity.Subject      = replica.summary
  entity.Description  = replica.description
  entity.Multi_text__c  = replica.description
  def converter = new WikiToHtmlConverter()
  String html = converter.convert(replica.description)
  //debug.error(html)
  entity.Multi_text__c  = html

  entity.Origin       = "Web"
  entity.Status       = "New"
  entity.comments     = commentHelper.mergeComments(entity, replica)
  entity.attachments  = attachmentHelper.mergeAttachments(entity, replica)
}

/*
  Custom Fields (CF)
      To add incoming values to a Salesforce CF of your preference, follow these steps:
      1/ Find the Field Name of the CF by going to the Fields & Relationships section of the Object.
      2/ Check how the value is coming over from the source side, by checking the "Entity Sync Status" of a ticket in syncronization and then selecting "Show Remote Replica".
      3/ Add it all together like this:
      entity."Field Name" = replica.customFields."CustomFieldNameSourceSide".value
*/

/*
  Status Syncronization
      For Status Syncing, we map the source status, to the destination status with a hash map.
      The syntax is as follows: def statusMap = ["remote status name": "local status name"]
      Go to Entity Sync Status, put in the entity key, and it will show you where to find the remote replica by clicking on Show remote replica.
      def statusMap = [
          "New"         : "New",
          "In Progress" : "Working",
          "Done"        : "Escalated"
        ]
      def remoteStatusName  = replica.status.name
      statusName            = statusMap[remoteStatusName] ?: Add a default status in these quotes"
      entity.Status         = statusName
*/

//Exalate API Reference Documentation: https://docs.exalate.com/docs/exalate-api-reference-documentation

